More explanations about some of the schema fields
The two “term” schemas are almost the same, by design. We wanted to make it easier to program by enabling copy-paste. Despite this, there are a few considerations which will affect your programming later on. Here’s how some of the fields will be used.

wordEnglish
Required
The term, in English
This will be present (non-empty) in both kinds of objects, termEnglish and termNonEnglish
It will be unique too

wordNonEnglish
The term, in another language
This will be empty in termEnglish, and present in termNonEnglish

wordExpanded
If the wordEnglish is an acronym or initialism, this will have the expansion
For example, JSON and “JavaScript Object Notation”
Otherwise, it will be empty

languageCode
Required
The ISO and de facto standardized codes for a language
For example “en” for English, or “en-ca” for English (Canada)
For termEnglish items, it will be one of the language codes that begin with “en”
For termNonEnglish items, it will be one of the others
Below, there is a link to a downloadable file of language codes that will be supported in the app

image, imageType, audio, and audioType
We will use these in a future class/lesson
For now, they can be empty
They will hold file names (image and audio) for non-text media items for a term (e.g. a diagram or its pronounciation)
(imageType and audioType are internet media type strings, e.g. “image/png”)

linkAuthoritative, linkWikipedia, and linkYouTube
URLs to web resources for the term
Can be present or empty
The “linkAuthoritative” is a link to the term’s authoritative info source
For example, for Node.js, it’s https://nodejs.org

authorName
Required
Your name

dateCreated and dateRevised
Required
These values are set in program code
Do NOT get them from the app’s user

fieldOfStudy
Probably “computer programming” for our terms
The course professors foresee that this app can be used by learners in any field of study, and not just ours, so that’s its purpose - to identify the term’s field of study

helpYes and helpNo
There will be a user interface (UI) item that will enable these values to be incremented
Obviously, with enablement by the web API
The idea is that we could ask the user whether the term they were looking at was hepful or not (to their learning)

definitions
A collection of one or more “definition” documents
It is always possible for someone to have an alternate or better definition than an existing one
It’s also possible that a term (e.g. “server”) could have multiple and somewhat different definitions

For a termNonEnglish document… termEnglishId
Required (for a termNonEnglish document
It is the object identifier of the termEnglish it’s related to

In the “definition” schema…

authorName
Required
Your name

dateCreated
Required
This value is set in program code
Do NOT get it from the app’s user

definition
Required
The actual possibly-lengthy definition or explanation of the term
The text format will be HTML
And, the plan is that the content will use the language’s character set

quality
Ignore this for now; for future use
(A human and/or AI-ML curator could assign a quality rating value to the definition)

likes
There will be a user interface (UI) item that will enable this value to be incremented
Obviously, with enablement by the web API
The idea is that the user could quickly and easily indicate whether they “like” the specific definition